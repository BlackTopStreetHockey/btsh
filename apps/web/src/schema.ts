/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * BTSH
 * BTSH
 * OpenAPI spec version: 1.0.0
 */
export type TeamsListParams = {
  /**
   * Which field to use when ordering the results.
   */
  ordering?: string;
  /**
   * A page number within the paginated result set.
   */
  page?: number;
  /**
   * A search term.
   */
  search?: string;
};

export type SeasonsListParams = {
  end_after?: string;
  end_before?: string;
  /**
   * Which field to use when ordering the results.
   */
  ordering?: string;
  /**
   * A page number within the paginated result set.
   */
  page?: number;
  /**
   * A search term.
   */
  search?: string;
  start_after?: string;
  start_before?: string;
};

export type SeasonRegistrationsListPosition =
  (typeof SeasonRegistrationsListPosition)[keyof typeof SeasonRegistrationsListPosition];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SeasonRegistrationsListPosition = {
  defense: "defense",
  forward: "forward",
  goalie: "goalie",
} as const;

export type SeasonRegistrationsListLocation =
  (typeof SeasonRegistrationsListLocation)[keyof typeof SeasonRegistrationsListLocation];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SeasonRegistrationsListLocation = {
  bronx: "bronx",
  brooklyn: "brooklyn",
  connecticut: "connecticut",
  long_island: "long_island",
  manhattan: "manhattan",
  new_jersey: "new_jersey",
  queens: "queens",
  westchester: "westchester",
} as const;

export type SeasonRegistrationsListParams = {
  is_captain?: boolean;
  /**
   * * `brooklyn` - Brooklyn
   * `bronx` - Bronx
   * `manhattan` - Manhattan
   * `queens` - Queens
   * `long_island` - Long Island
   * `new_jersey` - New Jersey
   * `connecticut` - Connecticut
   * `westchester` - Westchester
   */
  location?: SeasonRegistrationsListLocation;
  /**
   * Which field to use when ordering the results.
   */
  ordering?: string;
  /**
   * A page number within the paginated result set.
   */
  page?: number;
  /**
   * * `defense` - Defense
   * `forward` - Forward
   * `goalie` - Goalie
   */
  position?: SeasonRegistrationsListPosition;
  /**
   * A search term.
   */
  search?: string;
  season?: number;
  team?: number;
  user?: number;
};

export type GamesListStatus =
  (typeof GamesListStatus)[keyof typeof GamesListStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GamesListStatus = {
  cancelled: "cancelled",
  completed: "completed",
  scheduled: "scheduled",
} as const;

export type GamesListCourt =
  (typeof GamesListCourt)[keyof typeof GamesListCourt];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GamesListCourt = {
  east: "east",
  west: "west",
} as const;

export type GamesListParams = {
  away_team?: number;
  /**
   * * `east` - East
   * `west` - West
   */
  court?: GamesListCourt;
  duration?: string;
  end_after?: string;
  end_before?: string;
  game_day?: number;
  game_day__season?: number;
  home_team?: number;
  location?: string;
  /**
   * Which field to use when ordering the results.
   */
  ordering?: string;
  /**
   * A page number within the paginated result set.
   */
  page?: number;
  /**
   * Result
   */
  result?: string;
  /**
   * A search term.
   */
  search?: string;
  start_after?: string;
  start_before?: string;
  /**
   * * `scheduled` - Scheduled
   * `cancelled` - Cancelled
   * `completed` - Completed
   */
  status?: GamesListStatus;
};

export type GameRefereesListType =
  (typeof GameRefereesListType)[keyof typeof GameRefereesListType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GameRefereesListType = {
  fence: "fence",
  string: "string",
} as const;

export type GameRefereesListParams = {
  game?: number;
  /**
   * Which field to use when ordering the results.
   */
  ordering?: string;
  /**
   * A page number within the paginated result set.
   */
  page?: number;
  /**
   * A search term.
   */
  search?: string;
  /**
   * * `string` - String
   * `fence` - Fence
   */
  type?: GameRefereesListType;
};

export type GamePlayersListParams = {
  game?: number;
  is_goalie?: boolean;
  is_substitute?: boolean;
  /**
   * Which field to use when ordering the results.
   */
  ordering?: string;
  /**
   * A page number within the paginated result set.
   */
  page?: number;
  /**
   * A search term.
   */
  search?: string;
  team?: number;
};

export type GameGoalsListPeriod =
  (typeof GameGoalsListPeriod)[keyof typeof GameGoalsListPeriod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GameGoalsListPeriod = {
  NUMBER_1: "1",
  NUMBER_2: "2",
  ot: "ot",
  so: "so",
} as const;

export type GameGoalsListParams = {
  game?: number;
  /**
   * Which field to use when ordering the results.
   */
  ordering?: string;
  /**
   * A page number within the paginated result set.
   */
  page?: number;
  /**
   * * `1` - 1st
   * `2` - 2nd
   * `ot` - OT
   * `so` - SO
   */
  period?: GameGoalsListPeriod;
  /**
   * A search term.
   */
  search?: string;
  team?: number;
};

export type GameDaysListParams = {
  closing_team?: number;
  day_after?: string;
  day_before?: string;
  opening_team?: number;
  /**
   * Which field to use when ordering the results.
   */
  ordering?: string;
  /**
   * A page number within the paginated result set.
   */
  page?: number;
  /**
   * A search term.
   */
  search?: string;
  season?: number;
};

export type DivisionsListParams = {
  /**
   * Which field to use when ordering the results.
   */
  ordering?: string;
  /**
   * A page number within the paginated result set.
   */
  page?: number;
  /**
   * A search term.
   */
  search?: string;
};

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserReadOnlyGender = {
  ...GenderEnum,
  ...BlankEnum,
  ...NullEnum,
} as const;
/**
 * @nullable
 */
export type UserReadOnlyGender =
  | (typeof UserReadOnlyGender)[keyof typeof UserReadOnlyGender]
  | null;

export interface UserReadOnly {
  date_joined?: string;
  /** @maxLength 150 */
  first_name?: string;
  readonly full_name: string;
  /** @nullable */
  gender?: UserReadOnlyGender;
  readonly get_gender_display: string;
  readonly id: number;
  /** @maxLength 150 */
  last_name?: string;
}

/**
 * Reference: https://www.django-rest-framework.org/api-guide/serializers/#dynamically-modifying-fields
 */
export interface TeamReadOnly {
  readonly created_at: string;
  /** @nullable */
  readonly created_by: number | null;
  readonly id: number;
  /**
   * Comma separated list of jersey colors.
   * @nullable
   */
  jersey_colors?: string[] | null;
  logo: string;
  /** @maxLength 64 */
  name: string;
  /** @maxLength 10 */
  short_name: string;
  readonly updated_at: string;
  /** @nullable */
  readonly updated_by: number | null;
}

/**
 * * `scheduled` - Scheduled
 * `cancelled` - Cancelled
 * `completed` - Completed
 */
export type StatusEnum = (typeof StatusEnum)[keyof typeof StatusEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StatusEnum = {
  scheduled: "scheduled",
  cancelled: "cancelled",
  completed: "completed",
} as const;

/**
 * Reference: https://www.django-rest-framework.org/api-guide/serializers/#dynamically-modifying-fields
 */
export interface SeasonReadOnly {
  readonly created_at: string;
  /** @nullable */
  readonly created_by: number | null;
  end: string;
  readonly id: number;
  readonly is_current: string;
  readonly is_future: string;
  readonly is_past: string;
  start: string;
  readonly updated_at: string;
  /** @nullable */
  readonly updated_by: number | null;
  readonly year: string;
}

/**
 * * `defense` - Defense
 * `forward` - Forward
 * `goalie` - Goalie
 */
export type PositionEnum = (typeof PositionEnum)[keyof typeof PositionEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PositionEnum = {
  defense: "defense",
  forward: "forward",
  goalie: "goalie",
} as const;

/**
 * Reference: https://www.django-rest-framework.org/api-guide/serializers/#dynamically-modifying-fields
 */
export interface SeasonRegistrationReadOnly {
  readonly created_at: string;
  /** @nullable */
  readonly created_by: number | null;
  readonly get_location_display: string;
  readonly get_position_display: string;
  readonly id: number;
  is_captain: boolean;
  location: LocationEnum;
  position: PositionEnum;
  registered_at?: string;
  season: SeasonReadOnly;
  team: TeamReadOnly;
  readonly updated_at: string;
  /** @nullable */
  readonly updated_by: number | null;
  user: UserReadOnly;
}

/**
 * * `1` - 1st
 * `2` - 2nd
 * `ot` - OT
 * `so` - SO
 */
export type PeriodEnum = (typeof PeriodEnum)[keyof typeof PeriodEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PeriodEnum = {
  NUMBER_1: "1",
  NUMBER_2: "2",
  ot: "ot",
  so: "so",
} as const;

export interface PaginatedTeamReadOnlyList {
  count: number;
  /** @nullable */
  next?: string | null;
  /** @nullable */
  previous?: string | null;
  results: TeamReadOnly[];
}

export interface PaginatedSeasonRegistrationReadOnlyList {
  count: number;
  /** @nullable */
  next?: string | null;
  /** @nullable */
  previous?: string | null;
  results: SeasonRegistrationReadOnly[];
}

export interface PaginatedSeasonReadOnlyList {
  count: number;
  /** @nullable */
  next?: string | null;
  /** @nullable */
  previous?: string | null;
  results: SeasonReadOnly[];
}

export interface PaginatedGameRefereeReadOnlyList {
  count: number;
  /** @nullable */
  next?: string | null;
  /** @nullable */
  previous?: string | null;
  results: GameRefereeReadOnly[];
}

export interface PaginatedGameReadOnlyList {
  count: number;
  /** @nullable */
  next?: string | null;
  /** @nullable */
  previous?: string | null;
  results: GameReadOnly[];
}

export interface PaginatedGamePlayerReadOnlyList {
  count: number;
  /** @nullable */
  next?: string | null;
  /** @nullable */
  previous?: string | null;
  results: GamePlayerReadOnly[];
}

export interface PaginatedGameGoalReadOnlyList {
  count: number;
  /** @nullable */
  next?: string | null;
  /** @nullable */
  previous?: string | null;
  results: GameGoalReadOnly[];
}

export interface PaginatedGameDayReadOnlyList {
  count: number;
  /** @nullable */
  next?: string | null;
  /** @nullable */
  previous?: string | null;
  results: GameDayReadOnly[];
}

export interface PaginatedDivisionReadOnlyList {
  count: number;
  /** @nullable */
  next?: string | null;
  /** @nullable */
  previous?: string | null;
  results: DivisionReadOnly[];
}

export type NullEnum = (typeof NullEnum)[keyof typeof NullEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NullEnum = {} as const;

/**
 * * `brooklyn` - Brooklyn
 * `bronx` - Bronx
 * `manhattan` - Manhattan
 * `queens` - Queens
 * `long_island` - Long Island
 * `new_jersey` - New Jersey
 * `connecticut` - Connecticut
 * `westchester` - Westchester
 */
export type LocationEnum = (typeof LocationEnum)[keyof typeof LocationEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LocationEnum = {
  brooklyn: "brooklyn",
  bronx: "bronx",
  manhattan: "manhattan",
  queens: "queens",
  long_island: "long_island",
  new_jersey: "new_jersey",
  connecticut: "connecticut",
  westchester: "westchester",
} as const;

/**
 * * `male` - Male
 * `female` - Female
 * `non_binary` - Non-binary
 */
export type GenderEnum = (typeof GenderEnum)[keyof typeof GenderEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GenderEnum = {
  male: "male",
  female: "female",
  non_binary: "non_binary",
} as const;

/**
 * * `string` - String
 * `fence` - Fence
 */
export type GameRefereeReadOnlyTypeEnum =
  (typeof GameRefereeReadOnlyTypeEnum)[keyof typeof GameRefereeReadOnlyTypeEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GameRefereeReadOnlyTypeEnum = {
  string: "string",
  fence: "fence",
} as const;

/**
 * Reference: https://www.django-rest-framework.org/api-guide/serializers/#dynamically-modifying-fields
 */
export interface GameRefereeReadOnly {
  readonly created_at: string;
  /** @nullable */
  readonly created_by: number | null;
  game: number;
  readonly get_type_display: string;
  readonly id: number;
  type: GameRefereeReadOnlyTypeEnum;
  readonly updated_at: string;
  /** @nullable */
  readonly updated_by: number | null;
  user: UserReadOnly;
}

/**
 * * `regular` - Regular
 * `playoff` - Playoff
 */
export type GameReadOnlyTypeEnum =
  (typeof GameReadOnlyTypeEnum)[keyof typeof GameReadOnlyTypeEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GameReadOnlyTypeEnum = {
  regular: "regular",
  playoff: "playoff",
} as const;

/**
 * Reference: https://www.django-rest-framework.org/api-guide/serializers/#dynamically-modifying-fields
 */
export interface GameReadOnly {
  away_team: TeamReadOnly;
  readonly away_team_display: string;
  away_team_num_goals: number;
  court: CourtEnum;
  readonly created_at: string;
  /** @nullable */
  readonly created_by: number | null;
  duration?: string;
  readonly end: string;
  readonly get_court_display: string;
  get_result_display: string;
  readonly get_status_display: string;
  readonly get_type_display: string;
  home_team: TeamReadOnly;
  readonly home_team_display: string;
  home_team_num_goals: number;
  readonly id: number;
  /** @maxLength 256 */
  location?: string;
  losing_team_id: number;
  result: string;
  start: string;
  status?: StatusEnum;
  type?: GameReadOnlyTypeEnum;
  readonly updated_at: string;
  /** @nullable */
  readonly updated_by: number | null;
  winning_team_id: number;
}

/**
 * Reference: https://www.django-rest-framework.org/api-guide/serializers/#dynamically-modifying-fields
 */
export interface GamePlayerReadOnly {
  readonly created_at: string;
  /** @nullable */
  readonly created_by: number | null;
  game: number;
  readonly id: number;
  is_goalie: boolean;
  is_substitute?: boolean;
  readonly updated_at: string;
  /** @nullable */
  readonly updated_by: number | null;
  user: UserReadOnly;
}

/**
 * Reference: https://www.django-rest-framework.org/api-guide/serializers/#dynamically-modifying-fields
 */
export interface GameGoalReadOnly {
  assisted_by1: GamePlayerReadOnly;
  assisted_by2: GamePlayerReadOnly;
  readonly created_at: string;
  /** @nullable */
  readonly created_by: number | null;
  game: number;
  readonly get_period_display: string;
  readonly id: number;
  period: PeriodEnum;
  scored_by: GamePlayerReadOnly;
  team: TeamReadOnly;
  readonly updated_at: string;
  /** @nullable */
  readonly updated_by: number | null;
}

/**
 * Reference: https://www.django-rest-framework.org/api-guide/serializers/#dynamically-modifying-fields
 */
export interface GameDayReadOnly {
  closing_team: TeamReadOnly;
  readonly created_at: string;
  /** @nullable */
  readonly created_by: number | null;
  day: string;
  games: GameReadOnly[];
  readonly id: number;
  opening_team: TeamReadOnly;
  season: SeasonReadOnly;
  readonly updated_at: string;
  /** @nullable */
  readonly updated_by: number | null;
}

/**
 * Reference: https://www.django-rest-framework.org/api-guide/serializers/#dynamically-modifying-fields
 */
export interface DivisionReadOnly {
  readonly created_at: string;
  /** @nullable */
  readonly created_by: number | null;
  readonly id: number;
  /** @maxLength 32 */
  name: string;
  readonly updated_at: string;
  /** @nullable */
  readonly updated_by: number | null;
}

/**
 * * `east` - East
 * `west` - West
 */
export type CourtEnum = (typeof CourtEnum)[keyof typeof CourtEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CourtEnum = {
  east: "east",
  west: "west",
} as const;

export type BlankEnum = (typeof BlankEnum)[keyof typeof BlankEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BlankEnum = {
  "": "",
} as const;

export type divisionsListResponse = {
  data: PaginatedDivisionReadOnlyList;
  status: number;
  headers: Headers;
};

export const getDivisionsListUrl = (params?: DivisionsListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `http://localhost:8000/api/divisions/?${normalizedParams.toString()}`
    : `http://localhost:8000/api/divisions/`;
};

export const divisionsList = async (
  params?: DivisionsListParams,
  options?: RequestInit,
): Promise<divisionsListResponse> => {
  const res = await fetch(getDivisionsListUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data, headers: res.headers };
};

export type divisionsRetrieveResponse = {
  data: DivisionReadOnly;
  status: number;
  headers: Headers;
};

export const getDivisionsRetrieveUrl = (id: number) => {
  return `http://localhost:8000/api/divisions/${id}/`;
};

export const divisionsRetrieve = async (
  id: number,
  options?: RequestInit,
): Promise<divisionsRetrieveResponse> => {
  const res = await fetch(getDivisionsRetrieveUrl(id), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data, headers: res.headers };
};

export type gameDaysListResponse = {
  data: PaginatedGameDayReadOnlyList;
  status: number;
  headers: Headers;
};

export const getGameDaysListUrl = (params?: GameDaysListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `http://localhost:8000/api/game_days/?${normalizedParams.toString()}`
    : `http://localhost:8000/api/game_days/`;
};

export const gameDaysList = async (
  params?: GameDaysListParams,
  options?: RequestInit,
): Promise<gameDaysListResponse> => {
  const res = await fetch(getGameDaysListUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data, headers: res.headers };
};

export type gameDaysRetrieveResponse = {
  data: GameDayReadOnly;
  status: number;
  headers: Headers;
};

export const getGameDaysRetrieveUrl = (id: number) => {
  return `http://localhost:8000/api/game_days/${id}/`;
};

export const gameDaysRetrieve = async (
  id: number,
  options?: RequestInit,
): Promise<gameDaysRetrieveResponse> => {
  const res = await fetch(getGameDaysRetrieveUrl(id), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data, headers: res.headers };
};

export type gameGoalsListResponse = {
  data: PaginatedGameGoalReadOnlyList;
  status: number;
  headers: Headers;
};

export const getGameGoalsListUrl = (params?: GameGoalsListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `http://localhost:8000/api/game_goals/?${normalizedParams.toString()}`
    : `http://localhost:8000/api/game_goals/`;
};

export const gameGoalsList = async (
  params?: GameGoalsListParams,
  options?: RequestInit,
): Promise<gameGoalsListResponse> => {
  const res = await fetch(getGameGoalsListUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data, headers: res.headers };
};

export type gameGoalsRetrieveResponse = {
  data: GameGoalReadOnly;
  status: number;
  headers: Headers;
};

export const getGameGoalsRetrieveUrl = (id: number) => {
  return `http://localhost:8000/api/game_goals/${id}/`;
};

export const gameGoalsRetrieve = async (
  id: number,
  options?: RequestInit,
): Promise<gameGoalsRetrieveResponse> => {
  const res = await fetch(getGameGoalsRetrieveUrl(id), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data, headers: res.headers };
};

export type gamePlayersListResponse = {
  data: PaginatedGamePlayerReadOnlyList;
  status: number;
  headers: Headers;
};

export const getGamePlayersListUrl = (params?: GamePlayersListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `http://localhost:8000/api/game_players/?${normalizedParams.toString()}`
    : `http://localhost:8000/api/game_players/`;
};

export const gamePlayersList = async (
  params?: GamePlayersListParams,
  options?: RequestInit,
): Promise<gamePlayersListResponse> => {
  const res = await fetch(getGamePlayersListUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data, headers: res.headers };
};

export type gamePlayersRetrieveResponse = {
  data: GamePlayerReadOnly;
  status: number;
  headers: Headers;
};

export const getGamePlayersRetrieveUrl = (id: number) => {
  return `http://localhost:8000/api/game_players/${id}/`;
};

export const gamePlayersRetrieve = async (
  id: number,
  options?: RequestInit,
): Promise<gamePlayersRetrieveResponse> => {
  const res = await fetch(getGamePlayersRetrieveUrl(id), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data, headers: res.headers };
};

export type gameRefereesListResponse = {
  data: PaginatedGameRefereeReadOnlyList;
  status: number;
  headers: Headers;
};

export const getGameRefereesListUrl = (params?: GameRefereesListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `http://localhost:8000/api/game_referees/?${normalizedParams.toString()}`
    : `http://localhost:8000/api/game_referees/`;
};

export const gameRefereesList = async (
  params?: GameRefereesListParams,
  options?: RequestInit,
): Promise<gameRefereesListResponse> => {
  const res = await fetch(getGameRefereesListUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data, headers: res.headers };
};

export type gameRefereesRetrieveResponse = {
  data: GameRefereeReadOnly;
  status: number;
  headers: Headers;
};

export const getGameRefereesRetrieveUrl = (id: number) => {
  return `http://localhost:8000/api/game_referees/${id}/`;
};

export const gameRefereesRetrieve = async (
  id: number,
  options?: RequestInit,
): Promise<gameRefereesRetrieveResponse> => {
  const res = await fetch(getGameRefereesRetrieveUrl(id), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data, headers: res.headers };
};

export type gamesListResponse = {
  data: PaginatedGameReadOnlyList;
  status: number;
  headers: Headers;
};

export const getGamesListUrl = (params?: GamesListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `http://localhost:8000/api/games/?${normalizedParams.toString()}`
    : `http://localhost:8000/api/games/`;
};

export const gamesList = async (
  params?: GamesListParams,
  options?: RequestInit,
): Promise<gamesListResponse> => {
  const res = await fetch(getGamesListUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data, headers: res.headers };
};

export type gamesRetrieveResponse = {
  data: GameReadOnly;
  status: number;
  headers: Headers;
};

export const getGamesRetrieveUrl = (id: number) => {
  return `http://localhost:8000/api/games/${id}/`;
};

export const gamesRetrieve = async (
  id: number,
  options?: RequestInit,
): Promise<gamesRetrieveResponse> => {
  const res = await fetch(getGamesRetrieveUrl(id), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data, headers: res.headers };
};

export type seasonRegistrationsListResponse = {
  data: PaginatedSeasonRegistrationReadOnlyList;
  status: number;
  headers: Headers;
};

export const getSeasonRegistrationsListUrl = (
  params?: SeasonRegistrationsListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `http://localhost:8000/api/season-registrations/?${normalizedParams.toString()}`
    : `http://localhost:8000/api/season-registrations/`;
};

export const seasonRegistrationsList = async (
  params?: SeasonRegistrationsListParams,
  options?: RequestInit,
): Promise<seasonRegistrationsListResponse> => {
  const res = await fetch(getSeasonRegistrationsListUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data, headers: res.headers };
};

export type seasonRegistrationsRetrieveResponse = {
  data: SeasonRegistrationReadOnly;
  status: number;
  headers: Headers;
};

export const getSeasonRegistrationsRetrieveUrl = (id: number) => {
  return `http://localhost:8000/api/season-registrations/${id}/`;
};

export const seasonRegistrationsRetrieve = async (
  id: number,
  options?: RequestInit,
): Promise<seasonRegistrationsRetrieveResponse> => {
  const res = await fetch(getSeasonRegistrationsRetrieveUrl(id), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data, headers: res.headers };
};

export type seasonsListResponse = {
  data: PaginatedSeasonReadOnlyList;
  status: number;
  headers: Headers;
};

export const getSeasonsListUrl = (params?: SeasonsListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `http://localhost:8000/api/seasons/?${normalizedParams.toString()}`
    : `http://localhost:8000/api/seasons/`;
};

export const seasonsList = async (
  params?: SeasonsListParams,
  options?: RequestInit,
): Promise<seasonsListResponse> => {
  const res = await fetch(getSeasonsListUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data, headers: res.headers };
};

export type seasonsRetrieveResponse = {
  data: SeasonReadOnly;
  status: number;
  headers: Headers;
};

export const getSeasonsRetrieveUrl = (id: number) => {
  return `http://localhost:8000/api/seasons/${id}/`;
};

export const seasonsRetrieve = async (
  id: number,
  options?: RequestInit,
): Promise<seasonsRetrieveResponse> => {
  const res = await fetch(getSeasonsRetrieveUrl(id), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data, headers: res.headers };
};

export type teamsListResponse = {
  data: PaginatedTeamReadOnlyList;
  status: number;
  headers: Headers;
};

export const getTeamsListUrl = (params?: TeamsListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `http://localhost:8000/api/teams/?${normalizedParams.toString()}`
    : `http://localhost:8000/api/teams/`;
};

export const teamsList = async (
  params?: TeamsListParams,
  options?: RequestInit,
): Promise<teamsListResponse> => {
  const res = await fetch(getTeamsListUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data, headers: res.headers };
};

export type teamsRetrieveResponse = {
  data: TeamReadOnly;
  status: number;
  headers: Headers;
};

export const getTeamsRetrieveUrl = (shortName: string) => {
  return `http://localhost:8000/api/teams/${shortName}/`;
};

export const teamsRetrieve = async (
  shortName: string,
  options?: RequestInit,
): Promise<teamsRetrieveResponse> => {
  const res = await fetch(getTeamsRetrieveUrl(shortName), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data, headers: res.headers };
};
