// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  players     Player[]
  homeGames   Game[]    @relation("HomeTeam")
  awayGames   Game[]    @relation("AwayTeam")
  wins        Int       @default(0)
  losses      Int       @default(0)
  ties        Int       @default(0)
  division    String?
}

model Player {
  id              Int       @id @default(autoincrement())
  firstName       String
  lastName        String
  number          Int
  team            Team      @relation(fields: [teamId], references: [id])
  teamId          Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  goals           Goal[]
  assists         Assist[]
  penalties       Penalty[]
  totalGoals      Int       @default(0)
  totalAssists    Int       @default(0)
  penaltyMinutes  Int       @default(0)
}

model Game {
  id              Int       @id @default(autoincrement())
  homeTeam        Team      @relation("HomeTeam", fields: [homeTeamId], references: [id])
  homeTeamId      Int
  awayTeam        Team      @relation("AwayTeam", fields: [awayTeamId], references: [id])
  awayTeamId      Int
  homeScore       Int       @default(0)
  awayScore       Int       @default(0)
  startTime       DateTime
  endTime         DateTime
  venue           String
  referee         Referee   @relation(fields: [refereeId], references: [id])
  refereeId       Int
  status          GameStatus @default(SCHEDULED)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  periods         Period[]
  goals           Goal[]
  assists         Assist[]
  penalties       Penalty[]
  notes           String?
}

model Period {
  id        Int      @id @default(autoincrement())
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    Int
  number    Int
  startTime DateTime
  endTime   DateTime?
  goals     Goal[]
}

model Goal {
  id          Int      @id @default(autoincrement())
  game        Game     @relation(fields: [gameId], references: [id])
  gameId      Int
  period      Period   @relation(fields: [periodId], references: [id])
  periodId    Int
  scorer      Player   @relation(fields: [scorerId], references: [id])
  scorerId    Int
  assists     Assist[]
  timeInPeriod DateTime
  createdAt   DateTime @default(now())
}

model Assist {
  id          Int      @id @default(autoincrement())
  game        Game     @relation(fields: [gameId], references: [id])
  gameId      Int
  goal        Goal     @relation(fields: [goalId], references: [id])
  goalId      Int
  player      Player   @relation(fields: [playerId], references: [id])
  playerId    Int
  createdAt   DateTime @default(now())
}

model Penalty {
  id          Int           @id @default(autoincrement())
  game        Game          @relation(fields: [gameId], references: [id])
  gameId      Int
  player      Player        @relation(fields: [playerId], references: [id])
  playerId    Int
  type        PenaltyType
  minutes     Int
  timeInGame  DateTime
  createdAt   DateTime      @default(now())
}

model Referee {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  games     Game[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum GameStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

enum PenaltyType {
  MINOR
  MAJOR
  MISCONDUCT
  GAME_MISCONDUCT
  MATCH
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}